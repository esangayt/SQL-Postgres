-- Mostrar todos los triggers en una base de datos
select name        as TriggerName,
       object_id   as TriggerID,
       parent_id   as ParentID,
       type_desc   as TriggerType,
       is_disabled as IsDisabled,
       create_date as CreateDate
from sys.triggers;

-- USO DE TRIGGERS
create table AccionesTriggers
(
    ID         int identity (1,1) primary key,
    ID_CLIENTE int, -- que cliente fue eliminado
    ACCION     varchar(30), -- que accion se realizo
    FECHA      datetime default getdate(), -- fecha de la accion
    USUARIO    varchar(50) default system_user -- usuario que realizo la accion
)

-- INSERTER CLIENT_TRIGGERS
CREATE TRIGGER tr_CLIENTE
    ON CLIENT
    AFTER INSERT
    AS
BEGIN
    DECLARE @ACCION VARCHAR(30);

    DECLARE @ID_CLIENTE INT;
    SELECT @ID_CLIENTE = ID
    FROM INSERTED;

    INSERT INTO AccionesTriggers (ID_CLIENTE, ACCION) VALUES (@ID_CLIENTE, 'INSERTADO');
END;

-- CREATE NEW CLIENT
    INSERT INTO CLIENT (NOMBRE, APELLIDO, EMAIL, TELEFONO)
    VALUES ('John', 'Doe', 'jdoe@gmail.com', '123456789');

-- CREATE TRIGGER UPDATE CLIENT
CREATE TRIGGER tr_CLIENTE_UPDATE
    ON CLIENT
    AFTER UPDATE
    AS
BEGIN
    DECLARE @ACCION VARCHAR(30);
    DECLARE @ID_CLIENTE INT;

    SELECT @ID_CLIENTE = ID
    FROM INSERTED;

    SET @ACCION = 'ACTUALIZADO';

    INSERT INTO AccionesTriggers (ID_CLIENTE, ACCION) VALUES (@ID_CLIENTE, @ACCION);
END;

CREATE TRIGGER tr_CLIENTE_UPDATE_COLUMNS
    ON CLIENT
    AFTER UPDATE
    AS
BEGIN
    DECLARE @ACCION VARCHAR(30);
    DECLARE @ID_CLIENTE INT;
    SELECT @ID_CLIENTE = ID
    FROM INSERTED;

    IF UPDATE(NOMBRE)
        BEGIN
            SET @ACCION = 'NOMBRE EDITADO';
        END
    IF UPDATE(APELLIDO)
        BEGIN
            SET @ACCION = 'APELLIDO EDITADO';
        END
    IF UPDATE(EMAIL)
        BEGIN
            SET @ACCION = 'EMAIL EDITADO';
        END
    IF UPDATE(TELEFONO)
        BEGIN
            SET @ACCION = 'TELEFONO EDITADO';
        END

    INSERT INTO AccionesTriggers (ID_CLIENTE, ACCION) VALUES (@ID_CLIENTE, @ACCION);
END;

-- UPDATE CLIENT
UPDATE CLIENT
SET NOMBRE = 'EDITADO V3'
WHERE ID = 1;

delete from AccionesTriggers

-- CREAR TRIGGER PARA ELIMINAR CLIENTE
CREATE TRIGGER tr_CLIENTE_DELETE
ON CLIENT
AFTER DELETE
AS
BEGIN
    DECLARE @ACCION VARCHAR(30);
    DECLARE @ID_CLIENTE INT;

    SELECT @ID_CLIENTE = ID
    FROM DELETED;

    SET @ACCION = 'ELIMINADO';
    INSERT INTO AccionesTriggers (ID_CLIENTE, ACCION) VALUES (@ID_CLIENTE, @ACCION);
END;

INSERT INTO CLIENT (NOMBRE, APELLIDO, EMAIL, TELEFONO)
VALUES ('Jane', 'Smith', 'JONS223@GMAIL.COM', '987654321');
DELETE FROM CLIENT WHERE ID =8;

-- AÑADE FECHA A ACCIONESTRIGGERS
ALTER TABLE AccionesTriggers ADD FECHA DATETIME DEFAULT GETDATE();

-- ======= FUNCIONES ESCALARES ================

CREATE FUNCTION SUMA(@NUM1 INT, @NUM2 INT)
RETURNS INT
AS
BEGIN
DECLARE @RESULTADO INT;

    -- INSTRUCCIONES DE  LA FUNCIÓN
    SET @RESULTADO = @NUM1 + @NUM2;
    RETURN @RESULTADO;

END;

-- USO DE LA FUNCIÓN
SELECT dbo.SUMA(10, 20) AS ResultadoSuma;

DECLARE @TOTAL INT
SET @TOTAL = dbo.SUMA(10, 20);
-- SELECT @TOTAL AS TotalSuma;
PRINT 'El total de la suma es: ' + CAST(@TOTAL AS VARCHAR(10));

-- REALIZAR LOS CALCULOS VENTAS, DESCUENTO=10%, VENTAS CON DESCUENTO=TOTAL CON DESCUENTO USANDO LA TABLA PEDIDO
CREATE FUNCTION CALCULAR_VENTA(@IDPEDIDO INT)
RETURNS INT
AS
BEGIN
    DECLARE @TOTAL DECIMAL(10, 2);

    SELECT @TOTAL = SUM(P.CANTIDAD * PR.PRECIO)
    FROM PEDIDOS P
             JOIN PRODUCTOS pr ON P.ID_PRODUCTO = pr.ID
    WHERE P.ID = @IDPEDIDO;

    RETURN @TOTAL;
END

CREATE FUNCTION DESCUENTO(@IDPEDIDO INT, @DESCUENTO INT)
RETURNS DECIMAL(10, 2)
AS
BEGIN
    DECLARE @TOTAL DECIMAL(10, 2);

    SELECT @TOTAL = SUM(P.CANTIDAD * PR.PRECIO) * (1 - @DESCUENTO / 100.0)
    FROM PEDIDOS P
             JOIN PRODUCTOS PR ON P.ID_PRODUCTO = PR.ID
    WHERE P.ID = @IDPEDIDO;

    RETURN @TOTAL;
end

CREATE FUNCTION TOTAL_DESCUENTO(@IDPEDIDO INT, @DESCUENTO INT)
RETURNS TABLE
AS
-- BEGIN
    RETURN
        (
            SELECT SUM(P.CANTIDAD * PR.PRECIO) AS TotalVenta,
                   SUM(P.CANTIDAD * PR.PRECIO) * (1 - @DESCUENTO / 100.0) AS TotalConDescuento,
                   getdate() AS FechaVenta
            FROM PEDIDOS P
                     JOIN PRODUCTOS PR ON P.ID_PRODUCTO = PR.ID
            WHERE P.ID = @IDPEDIDO
        );

-- END

-- USO DE LA FUNCIÓN CALCULAR_VENTA
SELECT dbo.CALCULAR_VENTA(4) AS TotalVenta;
--     NTS = NOTAS
DECLARE @TOTAL_VENTA DECIMAL(10,2)
SET @TOTAL_VENTA = dbo.CALCULAR_VENTA(4);
-- PRINT 'El total de la venta es: ' + CAST(@TOTAL_VENTA AS VARCHAR(10));
PRINT 'El total de la venta es: ' + CONCAT('PEN',FORMAT(@TOTAL_VENTA, 'N2', 'es-ES'));

SELECT dbo.DESCUENTO(4, 10) AS TotalVentaConDescuento;
SELECT* FROM dbo.TOTAL_DESCUENTO(4, 10);
